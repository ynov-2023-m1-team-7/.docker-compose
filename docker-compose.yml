version: '3'
name: m1_mystore
networks:
  my-store-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1

services:
  My-Store-PostgreSql:
    build: 
      context: ./My-Store-PostgreSql
      dockerfile: Dockerfile
    image: m1_custom_postgresql
    container_name: m1_custom_postgresql
    restart: unless-stopped
    networks:
      - my-store-network
    ports:
      - "5432:5432"
    volumes:
      - ./My-Store-PostgreSql/data:/var/lib/postgresql/data2
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

  My-Store-MongoSql:
    build: 
      context: ./My-Store-MongoSql
      dockerfile: Dockerfile
    image: m1_custom_mongo
    container_name: m1_custom_mongo
    restart: unless-stopped
    networks:
      - my-store-network
    ports:
      - "27017:27017"
    volumes:
      - ./My-Store-MongoSql/data:/var/lib/mongo/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}

  My-Store-Redis:
    build: 
      context: ./My-Store-Redis
      dockerfile: Dockerfile
    image: m1_custom_redis
    container_name: m1_custom_redis
    restart: unless-stopped
    networks:
      - my-store-network
    ports:
      - "6379:6379"
    volumes:
      - ./My-Store-Redis/data:/var/lib/redis/data

  My-Store-Api-Express:
    build: 
      context: ./My-Store-Api-Express
      dockerfile: Dockerfile
    image: m1_custom_api_express
    container_name: m1_custom_api_express
    restart: unless-stopped
    networks:
      - my-store-network
    ports:
      - "3030:3030"
    depends_on:
      - My-Store-PostgreSql
    environment:
      - FRONTEND_URL=${FRONTEND_URL}
      - PORT=${PORT}
      - FILE_UPLOAD_URL=${FILE_UPLOAD_URL}
      - STACK=${STACK}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_URL=${POSTGRES_URL}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}

  My-Store-Api-Fastify:
    build: 
      context: ./My-Store-Api-Fastify
      dockerfile: Dockerfile
    image: m1_custom_api_fastify
    container_name: m1_custom_api_fastify
    restart: unless-stopped
    networks:
      - my-store-network
    ports:
      - "3232:3232"
    depends_on:
      - My-Store-PostgreSql
    environment:
      - PORT=${PORT}
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PWD=${MONGODB_PWD}
      - MONGODB_URL=${MONGODB_URL}
      - MONGODB_DB=${MONGODB_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  My-Store:
    build: 
      context: ./My-Store
      dockerfile: Dockerfile
    image: m1_custom_my-store
    container_name: m1_custom_my-store
    restart: unless-stopped
    networks:
      - my-store-network
    ports:
      - "3000:3000"
    volumes:
      - .:/var/www/html
    depends_on:
      - My-Store-Api-Express
      - My-Store-Api-Fastify
    environment:
      - NEXT_PUBLIC_API_ENDPOINT=${NEXT_PUBLIC_API_ENDPOINT}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}


# Command
# docker-compose --env-file .env -f docker-compose.yml up -d --build

# docker-compose --env-file .env -f docker-compose.yml down --remove-orphans